/**
 * main.c
 */
#include "msp.h"

const int FREQ_1_5_Mhz= 1.5;
const int FREQ_3_Mhz= 3;
const int FREQ_6_Mhz= 6;
const int FREQ_12_Mhz= 12;
const int FREQ_24_Mhz=24;
const int FREQ_48_Mhz=48;

void freq48(){


          /* Transition to VCORE Level 1: AM0_LDO --> AM1_LDO */
              while ((PCM->CTL1 & PCM_CTL1_PMR_BUSY));
              PCM->CTL0 = PCM_CTL0_KEY_VAL | PCM_CTL0_AMR_1;
              while ((PCM->CTL1 & PCM_CTL1_PMR_BUSY));

              /* Configure Flash wait-state to 1 for both banks 0 & 1 */
              FLCTL->BANK0_RDCTL = (FLCTL->BANK0_RDCTL &
              ~(FLCTL_BANK0_RDCTL_WAIT_MASK)) | FLCTL_BANK0_RDCTL_WAIT_1;
              FLCTL->BANK1_RDCTL = (FLCTL->BANK0_RDCTL &
              ~(FLCTL_BANK1_RDCTL_WAIT_MASK)) | FLCTL_BANK1_RDCTL_WAIT_1;

              /* Configure DCO to 48MHz, ensure MCLK uses DCO as source*/
              CS->KEY = CS_KEY_VAL ; // Unlock CS module for register access
              CS->CTL0 = 0; // Reset tuning parameters
              CS->CTL0 = CS_CTL0_DCORSEL_5; // Set DCO to 48MHz
              /* Select MCLK = DCO, no divider */
              CS->CTL1 = CS->CTL1 & ~(CS_CTL1_SELM_MASK | CS_CTL1_DIVM_MASK) |
              CS_CTL1_SELM_3;
              CS->KEY = 0; // Lock CS module from unintended accesses

          }


void set_DCO (int freq){
    CS->KEY= CS_KEY_VAL;
    CS->CTL0 = 0;
    /*
    if (CS->STAT & 0x00020000){
                 printf("tfshit\n");
             }
             */
    if (freq==FREQ_12_Mhz){
        CS->CTL0 |= CS_CTL0_DCORSEL_3;

    }
    else if (freq== FREQ_6_Mhz){
        CS->CTL0 |= CS_CTL0_DCORSEL_2;
    }
    else if (freq==FREQ_3_Mhz){

        CS->CTL0 |= CS_CTL0_DCORSEL_1;
    }
    else if (freq==FREQ_1_5_Mhz){
        CS->CTL0 |= CS_CTL0_DCORSEL_0;
    }
    else if (freq==FREQ_24_Mhz){
        CS->CTL0 |= CS_CTL0_DCORSEL_4;
    }

    CS->CTL1 = CS_CTL1_SELA_2 | CS_CTL1_SELS_3 | CS_CTL1_SELM_3;
    CS->KEY=0; // lock the thing back
}

void main(void)
{

    int i=0;
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;     // stop watchdog timer



        P4-> SEL0 |=BIT3;
        P4->SEL1 &= ~BIT3;
        P4-> DIR|= BIT3;



        int freq=3;
        if (freq==48){
            freq48();
        }
        else{
        set_DCO(freq);
        }

            /*
          if ( CS->STAT & 0x00000001 ==1){
              printf("bruh\n");
          }

         /*CS->CLKEN|=0x00000002;
          if (CS->STAT & 0x00020000){
              printf("tfshit\n");
          }
*/

}

